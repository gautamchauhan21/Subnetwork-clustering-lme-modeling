# List of variables to analyze
variables_to_report <- rv_list
# Loop through each variable and execute the functions
for (var in variables_to_report) {
cat("## Statistical result for ", var, "\n")
cat("### Report Main Effect for", var, "\n")
report_main_effect(var)
cat("### Report Interaction Effect for", var, "\n")
report_inter_age_sex_layer(var)
}
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, comment = "")
freshr::freshr()
# Verify the working directory
getwd() # Should print the path to your working directory
library(gridExtra)
library(knitr)
library(tidyverse)
library(tinytex)
library(extrafont)
library(ggpubr)
library(sjPlot)
#set-theme for figure
theme_set (theme_classic(base_size = 10, base_family = "sans"))
##libraries for color
library(ggsci)
library(here)
# Load source
source(here("src", "Develop_Function_posthoc.R"))
# Load RData
load(here("output","Kmean_CovM_SummaryDev.RData"))
count <- df_lite %>%
group_by(sex, f.age) %>%
dplyr::summarize(animal_count = n_distinct(subject_id),
image_count = n())
kable(count)
tab_model(mod_list_select)
plot_raw_boot_facet_layer("total_cell_number",
y_breaks = seq(0, 400, 100),
y_limits = c(0, 400),
legend_position =c(0.9, 0.9))
# Save the figure
ggsave("total_cell_number.svg", plot = last_plot(), path = here("output_plot"),
width = 3.5, height = 2, units = "in")
plot_raw_boot_facet_sex("total_cell_number",
y_breaks = seq(0, 400, 100),
y_limits = c(0, 400),
legend_position = c(0.9, 0.9))
# Save the figure
ggsave("total_cell_number_facet_sex.svg", plot = last_plot(), path = here("output_plot"),
width = 3.5, height = 2, units = "in")
plot_raw_boot_merge_sex("total_cell_number",
y_breaks = seq(0, 400, 100),
y_limits = c(0, 400),
legend_position = c(0.9, 0.9))
ggsave("total_cell_number_facet_merge_sex.svg", plot = last_plot(), path = here("output_plot"),
width = 3.5, height = 2, units = "in")
#variables_to_plot <- rv_list
variables_to_plot <- c('total_cell_number','n_cls_before_stat','silhs_mean_before_stat','n_cls')
# create the y-axis parameter
y_axis_params <- list(
total_cell_number = list(y_breaks = seq(0, 400, by = 100), y_limits = c(0, 400)),
n_cls_before_stat = list(y_breaks = seq(0, 100, by = 5), y_limits = c(0, 25)),
silhs_mean_before_stat = list(y_breaks = seq(0, 100, by = 0.25), y_limits = c(0, 1)),
n_cls = list(y_breaks = seq(0, 100, by = 5), y_limits = c(0,15))
)
list_figures <- lapply(variables_to_plot, function(var) {
params <- y_axis_params[[var]] # Get the parameters for the current variable
plot_raw_boot_facet_layer (var,
y_breaks = params$y_breaks,
y_limits = params$y_limits,
legend_position = "none",
fig_title = var)
})
# Assemble the figures using ggarrange with common.legend = TRUE
ggarrange(plotlist = list_figures,
ncol = 2, nrow = 2,
common.legend = TRUE, legend = "top")
variables_to_plot <- rv_list
# create the y-axis parameter
y_axis_params <- list(
total_cell_number = list(y_breaks = seq(0, 400, by = 100), y_limits = c(0, 400)),
n_cls_before_stat = list(y_breaks = seq(0, 100, by = 5), y_limits = c(0, 25)),
silhs_mean_before_stat = list(y_breaks = seq(0, 100, by = 0.25), y_limits = c(0, 1)),
n_cls = list(y_breaks = seq(0, 100, by = 5), y_limits = c(0,15))
)
list_figures <- lapply(variables_to_plot, function(var) {
params <- y_axis_params[[var]] # Get the parameters for the current variable
plot_raw_boot_facet_layer (var,
y_breaks = params$y_breaks,
y_limits = params$y_limits,
legend_position = "none",
fig_title = var)
})
# Assemble the figures using ggarrange with common.legend = TRUE
ggarrange(plotlist = list_figures,
ncol = 2, nrow = 5,
common.legend = TRUE, legend = "top")
# List of variables to analyze
variables_to_report <- rv_list
# Loop through each variable and execute the functions
for (var in variables_to_report) {
cat("## Statistical result for ", var, "\n")
cat("### Report Main Effect for", var, "\n")
report_main_effect(var)
cat("### Report Interaction Effect for", var, "\n")
report_inter_age_sex_layer(var)
}
# Refresh the R session to clear the environment
# This ensures that any previous objects, functions, or loaded packages are removed.
freshr::freshr()
# Set the working directory to the desired folder
# This is the folder where your project files are located.
# Verify the working directory
getwd() # Should print the path to your working directory
# Load necessary libraries
# These libraries provide various functions and tools needed for data manipulation, analysis, and visualization.
library(readxl)    # For reading Excel files
library(janitor)   # For cleaning data
library(dplyr)     # For data manipulation
library(car)       # For regression diagnostics
library(sjPlot)    # For data visualization and tabulation
library(tictoc)    # For timing code execution
library(skimr)     # For summarizing data
library(here)
source(here("src","Develop_Function.R"))
# import data from Excel file
df <-read_xlsx(here("data","Kmean_CovM_SummaryDev.xlsx"), sheet = "Sheet1")
# Alternatively, construct excel file path
excel_file_path <- file.path(getwd(),"data","Kmean_CovM_SummaryDev.xlsx")
df <- read_xlsx(excel_file_path, sheet = "Sheet1")
# Clean and check column names
df <- clean_names(df)
column_names_all = names(df)
column_names_all
# Define response variables (RV) list
# This will be the variables be used for running analysis
rv_list <- column_names_all[c(8:17)]
rv_list
# Define covariate variables list
cv_list <- c("sex", "layer","age")
cv_list
# Check unique values of 'location'
table(df$subject_id)
table(df$location)
#' very few location 4, remove from analysis to decrease the complexity of data fitting
