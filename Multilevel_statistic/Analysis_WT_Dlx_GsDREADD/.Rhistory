column_names_all
# rename the label
df <- df %>% rename(p15_cno = p15cno)
# Define covariate variables list
cv_list= c("sex", "layer", "p15_cno")
cv_list
# Import data from Excel file
df <- read_xlsx(here("data","Kmean_CovM_SummaryDlxGsDREADD.xlsx"), sheet = "Sheet1")
# Clean and check column names
df = clean_names(df)
column_names_all = names(df)
column_names_all
# rename the label
df <- df %>% rename(p15_cno = p15cno)
# Define covariate variables list
cv_list= c("sex", "layer", "p15_cno")
cv_list
# Define response variables (RV) list
# This will be the variables be used for running analysis
rv_list = column_names_all[c(10:19)]
# Check unique values of 'location'
table(df$location)
# Check if all variables are included in the data
summary(rv_list %in% names(df))
summary(cv_list %in% names(df))
# Overview of the variables
skimr::skim(df, c(all_of(cv_list), all_of(rv_list)))
# Check if all variables are included in the data
summary(rv_list %in% names(df))
summary(cv_list %in% names(df))
# Overview of the variables
skimr::skim(df, c(all_of(cv_list), all_of(rv_list)))
# Check unique values of animal_id
table(df$subject_id)
# create a lite version and convert the list of response variables to numeric
df_lite = df %>%
filter(!is.na(n_cls_before_stat))%>%
select(all_of(cv_list), all_of(rv_list),subject_id,location) %>%
mutate(f.layer = factor(layer))
# Update cv_list with factor variables
cv_list[2] = "f.layer"
# Density estimates of response variables
lapply(rv_list, function(x) with(df_lite, densityPlot(get(x), xlab = x)))
# Check distribution of RV
summary(df_lite$silhs_mean_before_stat)
summary(df_lite$n_cls)
# Overview of the variables and save the result
simple_test <-skimr::skim(df_lite, c(all_of(cv_list), all_of(rv_list)))
# Three-Way analysis
# Apply to all outcome variables of interest
mod_list = lapply(rv_list, function(x) lmer_three_way(x))
names(mod_list) = rv_list
tab_model(mod_list)
# Check which variables throw the warning message
sapply(rv_list, function(x) mod_list[[x]]@optinfo$conv$lme4$messages)
# Model selection ---------------------------------------------------------
mod_list_select = lapply(rv_list, model_select)
names(mod_list_select) = rv_list
tab_model(mod_list_select)
anova_list_select = lapply(mod_list_select, Anova, type = 3,
test.statistic = "F")
anova_list_select
# After determining the correct model for fitting, employ bootstrap---------
mod_class = sapply(mod_list_select, function(x) class(x)[1])
mod_list_lm = mod_list_select[which(mod_class == "lm")]
mod_list_lmer = mod_list_select[which(mod_class == "lmerMod")]
# lm bootstrap
tic("lm Bootstrap Execution")
lm_boot_list <- lapply(mod_list_lm, lm_bootstrap, R = 10000)
toc()
View(case_bootstrap)
# lmer bootstrap
Sys.time()
tic("case bootstrap")
set.seed(47408)
cl = makeCluster(16)
registerDoParallel(cl)
# default: b1 = 625, b2 = 16 --> B = 10000
case_boot_list = lapply(mod_list_lmer, case_bootstrap, b1 = 625, b2 = 16)
stopCluster(cl)
toc()
# Save output ---------------------------------------------------
save.image(file = here("output","Kmean_CovM_SummaryWT_Dlx_GsDREADD.RData"))
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, comment = "")
# Set the working directory to the desired folder
# This is the folder where your project files are located.
# Verify the working directory
print(getwd()) # Should print the path to your working directory
freshr::freshr()
library(gridExtra)
library(knitr)
library(tidyverse)
library(tinytex)
library(extrafont)
library(ggpubr)
library(sjPlot)
librry(here)
#list the Fonts in windows
#windowsFonts()
#set-theme for figure
theme_set (theme_classic(base_size = 10, base_family = "sans"))
#list the Fonts in windows
##libraries for color
library(ggsci)
# Load source file
source(here("src", "WT_Dlx_GsDREADD_Function_posthoc.R"))
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, comment = "")
# Set the working directory to the desired folder
# This is the folder where your project files are located.
# Verify the working directory
print(getwd()) # Should print the path to your working directory
freshr::freshr()
library(gridExtra)
library(knitr)
library(tidyverse)
library(tinytex)
library(extrafont)
library(ggpubr)
library(sjPlot)
library(here)
#list the Fonts in windows
#windowsFonts()
#set-theme for figure
theme_set (theme_classic(base_size = 10, base_family = "sans"))
#list the Fonts in windows
##libraries for color
library(ggsci)
# Load source file
source(here("src", "WT_Dlx_GsDREADD_Function_posthoc.R"))
#result source
load(here("output","Kmean_CovM_SummaryWT_Dlx_GsDREADD.RData"))
count <- df_lite %>%
group_by(sex, p15_cno) %>%
dplyr::summarize(animal_count = n_distinct(subject_id),
image_count = n())
kable(count)
plot_raw_boot_facet_layer("total_cell_number",
y_breaks = seq(0, 400, 100),
y_limits = c(0, 400),
legend_position = "right")
plot_raw_boot_facet_sex("total_cell_number",
y_breaks = seq(0, 400, 100),
y_limits = c(0, 400),
legend_position = "right")
plot_raw_boot("total_cell_number",
y_breaks = seq(0, 400, 100),
y_limits = c(0, 400),
legend_position = "right")
variables_to_plot = rv_list
# create the y-axis parameter
y_axis_params <- list(
total_cell_number = list(y_breaks = seq(0, 400, by = 100), y_limits = c(0, 400)),
n_cls_before_stat = list(y_breaks = seq(0, 100, by = 10), y_limits = c(0, 30)),
silhs_mean_before_stat = list(y_breaks = seq(0, 100, by = 0.25), y_limits = c(0, 1)),
silhs_max_before_stat = list(y_breaks = seq(0, 100, by = 0.25), y_limits = c(0, 1)),
n_cls = list(y_breaks = seq(0, 100, by = 5), y_limits = c(0,15)),
no_assemblies = list(y_breaks = seq(0, 100, by = 25), y_limits = c(0, 100)),
s_assemblies = list(y_breaks = seq(0, 100, by = 25), y_limits = c(0, 100)),
m_assemblies = list(y_breaks = seq(0, 100, by = 25), y_limits = c(0, 100)),
cells_not_in_assembly = list(y_breaks = seq(0, 100, by = 25), y_limits = c(0, 100)),
cells_in_one_assembly = list(y_breaks = seq(0, 100, by = 25), y_limits = c(0, 100)),
cells_in_many_assembly = list(y_breaks = seq(0, 100, by = 25), y_limits = c(0, 100))
)
list_figures <- lapply(variables_to_plot, function(var) {
params <- y_axis_params[[var]] # Get the parameters for the current variable
plot_raw_boot_facet_layer (var,
y_breaks = params$y_breaks,
y_limits = params$y_limits,
legend_position = "none",
fig_title = var)
})
# Assemble the figures using ggarrange with common.legend = False
ggarrange(plotlist = list_figures,
ncol = 2, nrow = 6,
common.legend = TRUE, legend = "top")
# Save the figure
#ggsave("Fig_whisker_grid_sex.svg", plot = last_plot(), path = here("output_plot"),
#       width = 8, height = 4, units = "in")
# List of variables to analyze
#variables_to_report <- rv_list
variables_to_report <- c("total_cell_number", "n_cls")
# Loop through each variable and execute the functions
for (var in variables_to_report) {
cat("## Statistical result for ", var, "\n")
cat("### Report Main Effect for", var, "\n")
report_main(var)
cat("### Report Interaction Effect for", var, "\n")
report_all_interaction_simple (var, var_int1 = "p15_cno", var_int2 = "sex", var_int3 = "f.layer")
}
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, comment = "")
# Verify the working directory
print(getwd()) # Should print the path to your working directory
freshr::freshr()
library(gridExtra)
library(knitr)
library(tidyverse)
library(tinytex)
library(extrafont)
library(ggpubr)
library(sjPlot)
library(here)
#set-theme for figure
theme_set (theme_classic(base_size = 10, base_family = "sans"))
##libraries for color
library(ggsci)
# Load source file
source(here("src", "WT_Dlx_GsDREADD_Function_posthoc.R"))
variables_to_plot = rv_list
# create the y-axis parameter
y_axis_params <- list(
total_cell_number = list(y_breaks = seq(0, 400, by = 100), y_limits = c(0, 400)),
n_cls_before_stat = list(y_breaks = seq(0, 100, by = 10), y_limits = c(0, 30)),
silhs_mean_before_stat = list(y_breaks = seq(0, 100, by = 0.25), y_limits = c(0, 1)),
n_cls = list(y_breaks = seq(0, 100, by = 5), y_limits = c(0,15)),
no_assemblies = list(y_breaks = seq(0, 100, by = 25), y_limits = c(0, 100)),
s_assemblies = list(y_breaks = seq(0, 100, by = 25), y_limits = c(0, 100)),
m_assemblies = list(y_breaks = seq(0, 100, by = 25), y_limits = c(0, 100)),
cells_not_in_assembly = list(y_breaks = seq(0, 100, by = 25), y_limits = c(0, 100)),
cells_in_one_assembly = list(y_breaks = seq(0, 100, by = 25), y_limits = c(0, 100)),
cells_in_many_assembly = list(y_breaks = seq(0, 100, by = 25), y_limits = c(0, 100))
)
list_figures <- lapply(variables_to_plot, function(var) {
params <- y_axis_params[[var]] # Get the parameters for the current variable
plot_raw_boot_facet_layer (var,
y_breaks = params$y_breaks,
y_limits = params$y_limits,
legend_position = "none",
fig_title = var)
})
# Assemble the figures using ggarrange with common.legend = False
ggarrange(plotlist = list_figures,
ncol = 4, nrow = 3,
common.legend = TRUE, legend = "top")
# Save the figure
#ggsave("Fig_whisker_grid_sex.svg", plot = last_plot(), path = here("output_plot"),
#       width = 8, height = 4, units = "in")
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, comment = "")
# Verify the working directory
print(getwd()) # Should print the path to your working directory
freshr::freshr()
library(gridExtra)
library(knitr)
library(tidyverse)
library(tinytex)
library(extrafont)
library(ggpubr)
library(sjPlot)
library(here)
#set-theme for figure
theme_set (theme_classic(base_size = 10, base_family = "sans"))
##libraries for color
library(ggsci)
# Load source file
source(here("src", "WT_Dlx_GsDREADD_Function_posthoc.R"))
#result source
load(here("output","Kmean_CovM_SummaryWT_Dlx_GsDREADD.RData"))
count <- df_lite %>%
group_by(sex, p15_cno) %>%
dplyr::summarize(animal_count = n_distinct(subject_id),
image_count = n())
kable(count)
plot_raw_boot_facet_layer("total_cell_number",
y_breaks = seq(0, 400, 100),
y_limits = c(0, 400),
legend_position = "right")
plot_raw_boot_facet_sex("total_cell_number",
y_breaks = seq(0, 400, 100),
y_limits = c(0, 400),
legend_position = "right")
plot_raw_boot("total_cell_number",
y_breaks = seq(0, 400, 100),
y_limits = c(0, 400),
legend_position = "right")
variables_to_plot = rv_list
# create the y-axis parameter
y_axis_params <- list(
total_cell_number = list(y_breaks = seq(0, 400, by = 100), y_limits = c(0, 400)),
n_cls_before_stat = list(y_breaks = seq(0, 100, by = 10), y_limits = c(0, 30)),
silhs_mean_before_stat = list(y_breaks = seq(0, 100, by = 0.25), y_limits = c(0, 1)),
n_cls = list(y_breaks = seq(0, 100, by = 5), y_limits = c(0,15)),
no_assemblies = list(y_breaks = seq(0, 100, by = 25), y_limits = c(0, 100)),
s_assemblies = list(y_breaks = seq(0, 100, by = 25), y_limits = c(0, 100)),
m_assemblies = list(y_breaks = seq(0, 100, by = 25), y_limits = c(0, 100)),
cells_not_in_assembly = list(y_breaks = seq(0, 100, by = 25), y_limits = c(0, 100)),
cells_in_one_assembly = list(y_breaks = seq(0, 100, by = 25), y_limits = c(0, 100)),
cells_in_many_assembly = list(y_breaks = seq(0, 100, by = 25), y_limits = c(0, 100))
)
list_figures <- lapply(variables_to_plot, function(var) {
params <- y_axis_params[[var]] # Get the parameters for the current variable
plot_raw_boot_facet_layer (var,
y_breaks = params$y_breaks,
y_limits = params$y_limits,
legend_position = "none",
fig_title = var)
})
# Assemble the figures using ggarrange with common.legend = False
ggarrange(plotlist = list_figures,
ncol = 4, nrow = 3,
common.legend = TRUE, legend = "top")
# Save the figure
#ggsave("Fig_whisker_grid_sex.svg", plot = last_plot(), path = here("output_plot"),
#       width = 8, height = 4, units = "in")
plot_raw_boot_facet_layer("total_cell_number",
y_breaks = seq(0, 400, 100),
y_limits = c(0, 400),
legend_position = "right")
# List of variables to analyze
#variables_to_report <- rv_list
variables_to_report <- c("total_cell_number", "n_cls")
# Loop through each variable and execute the functions
for (var in variables_to_report) {
cat("## Statistical result for ", var, "\n")
cat("### Report Main Effect for", var, "\n")
report_main(var)
cat("### Report Interaction Effect for", var, "\n")
report_all_interaction_simple (var, var_int1 = "p15_cno", var_int2 = "sex", var_int3 = "f.layer")
}
# List of variables to analyze
variables_to_report <- rv_list
#variables_to_report <- c("total_cell_number", "n_cls")
# Loop through each variable and execute the functions
for (var in variables_to_report) {
cat("## Statistical result for ", var, "\n")
cat("### Report Main Effect for", var, "\n")
report_main(var)
cat("### Report Interaction Effect for", var, "\n")
report_all_interaction_simple (var, var_int1 = "p15_cno", var_int2 = "sex", var_int3 = "f.layer")
}
# Refresh the R session to clear the environment
# This ensures that any previous objects, functions, or loaded packages are removed.
freshr::freshr()
# Verify the working directory
print(getwd()) # Should print the path to your working directory
# Load necessary libraries
# These libraries provide various functions and tools needed for data manipulation, analysis, and visualization.
library(readxl)
library(janitor)
library(dplyr)
library(car)
library(sjPlot)
library(tictoc)
library(skimr)
library(stringr)
library(here)
# Load source file-custom functions
source(here("src", "WT_Dlx_GsDREADD_Function.R"))
# Import data from Excel file
df <- read_xlsx(here("data","Kmean_CovM_SummaryDlxGsDREADD.xlsx"), sheet = "Sheet1")
# Clean and check column names
df = clean_names(df)
column_names_all = names(df)
column_names_all
# rename the label
df <- df %>% rename(p15_cno = p15cno)
# Define covariate variables list
cv_list= c("sex", "layer", "p15_cno")
cv_list
# Define response variables (RV) list
# This will be the variables be used for running analysis
rv_list = column_names_all[c(10:19)]
# Check unique values of 'location'
table(df$location)
# Check if all variables are included in the data
summary(rv_list %in% names(df))
summary(cv_list %in% names(df))
# Overview of the variables
skimr::skim(df, c(all_of(cv_list), all_of(rv_list)))
# Check unique values of animal_id
table(df$subject_id)
# create a lite version and convert the list of response variables to numeric
df_lite = df %>%
filter(!is.na(n_cls_before_stat))%>%
select(all_of(cv_list), all_of(rv_list),subject_id,location) %>%
mutate(f.layer = factor(layer))
# Update cv_list with factor variables
cv_list[2] = "f.layer"
# Density estimates of response variables
lapply(rv_list, function(x) with(df_lite, densityPlot(get(x), xlab = x)))
# Check distribution of RV
summary(df_lite$silhs_mean_before_stat)
summary(df_lite$n_cls)
# Overview of the variables and save the result
simple_test <-skimr::skim(df_lite, c(all_of(cv_list), all_of(rv_list)))
# Three-Way analysis
# Apply to all outcome variables of interest
mod_list = lapply(rv_list, function(x) lmer_three_way(x))
names(mod_list) = rv_list
tab_model(mod_list)
# Check which variables throw the warning message
sapply(rv_list, function(x) mod_list[[x]]@optinfo$conv$lme4$messages)
# Model selection ---------------------------------------------------------
mod_list_select = lapply(rv_list, model_select)
names(mod_list_select) = rv_list
tab_model(mod_list_select)
anova_list_select = lapply(mod_list_select, Anova, type = 3,
test.statistic = "F")
anova_list_select
# After determining the correct model for fitting, employ bootstrap---------
mod_class = sapply(mod_list_select, function(x) class(x)[1])
mod_list_lm = mod_list_select[which(mod_class == "lm")]
mod_list_lmer = mod_list_select[which(mod_class == "lmerMod")]
# lm bootstrap
tic("lm Bootstrap Execution")
lm_boot_list <- lapply(mod_list_lm, lm_bootstrap, R = 10000)
toc()
# lmer bootstrap
Sys.time()
tic("case bootstrap")
set.seed(47408)
cl = makeCluster(16)
registerDoParallel(cl)
# default: b1 = 625, b2 = 16 --> B = 10000
case_boot_list = lapply(mod_list_lmer, case_bootstrap, b1 = 625, b2 = 16)
stopCluster(cl)
toc()
# Save output ---------------------------------------------------
save.image(file = here("output","Kmean_CovM_SummaryWT_Dlx_GsDREADD.RData"))
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, comment = "")
# Verify the working directory
print(getwd()) # Should print the path to your working directory
freshr::freshr()
library(gridExtra)
library(knitr)
library(tidyverse)
library(tinytex)
library(extrafont)
library(ggpubr)
library(sjPlot)
library(here)
#set-theme for figure
theme_set (theme_classic(base_size = 10, base_family = "sans"))
##libraries for color
library(ggsci)
# Load source file
source(here("src", "WT_Dlx_GsDREADD_Function_posthoc.R"))
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, comment = "")
# Verify the working directory
print(getwd()) # Should print the path to your working directory
freshr::freshr()
library(gridExtra)
library(knitr)
library(tidyverse)
library(tinytex)
library(extrafont)
library(ggpubr)
library(sjPlot)
library(here)
#set-theme for figure
theme_set (theme_classic(base_size = 10, base_family = "sans"))
##libraries for color
library(ggsci)
# Load source file
source(here("src", "WT_Dlx_GsDREADD_Function_posthoc.R"))
#result source
load(here("output","Kmean_CovM_SummaryWT_Dlx_GsDREADD.RData"))
count <- df_lite %>%
group_by(sex, p15_cno) %>%
dplyr::summarize(animal_count = n_distinct(subject_id),
image_count = n())
kable(count)
plot_raw_boot_facet_layer("total_cell_number",
y_breaks = seq(0, 400, 100),
y_limits = c(0, 400),
legend_position = "right")
plot_raw_boot_facet_sex("total_cell_number",
y_breaks = seq(0, 400, 100),
y_limits = c(0, 400),
legend_position = "right")
plot_raw_boot("total_cell_number",
y_breaks = seq(0, 400, 100),
y_limits = c(0, 400),
legend_position = "right")
variables_to_plot = rv_list
# create the y-axis parameter
y_axis_params <- list(
total_cell_number = list(y_breaks = seq(0, 400, by = 100), y_limits = c(0, 400)),
n_cls_before_stat = list(y_breaks = seq(0, 100, by = 10), y_limits = c(0, 30)),
silhs_mean_before_stat = list(y_breaks = seq(0, 100, by = 0.25), y_limits = c(0, 1)),
n_cls = list(y_breaks = seq(0, 100, by = 5), y_limits = c(0,15)),
no_assemblies = list(y_breaks = seq(0, 100, by = 25), y_limits = c(0, 100)),
s_assemblies = list(y_breaks = seq(0, 100, by = 25), y_limits = c(0, 100)),
m_assemblies = list(y_breaks = seq(0, 100, by = 25), y_limits = c(0, 100)),
cells_not_in_assembly = list(y_breaks = seq(0, 100, by = 25), y_limits = c(0, 100)),
cells_in_one_assembly = list(y_breaks = seq(0, 100, by = 25), y_limits = c(0, 100)),
cells_in_many_assembly = list(y_breaks = seq(0, 100, by = 25), y_limits = c(0, 100))
)
list_figures <- lapply(variables_to_plot, function(var) {
params <- y_axis_params[[var]] # Get the parameters for the current variable
plot_raw_boot_facet_layer (var,
y_breaks = params$y_breaks,
y_limits = params$y_limits,
legend_position = "none",
fig_title = var)
})
# Assemble the figures using ggarrange with common.legend = False
ggarrange(plotlist = list_figures,
ncol = 4, nrow = 3,
common.legend = TRUE, legend = "top")
# Save the figure
#ggsave("Fig.svg", plot = last_plot(), path = here("output_plot"),
#       width = 8, height = 4, units = "in")
# List of variables to analyze
variables_to_report <- rv_list
#variables_to_report <- c("total_cell_number", "n_cls")
# Loop through each variable and execute the functions
for (var in variables_to_report) {
cat("## Statistical result for ", var, "\n")
cat("### Report Main Effect for", var, "\n")
report_main(var)
cat("### Report Interaction Effect for", var, "\n")
report_all_interaction_simple (var, var_int1 = "p15_cno", var_int2 = "sex", var_int3 = "f.layer")
}
